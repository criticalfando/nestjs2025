Se configura el entorno, instalando NESTJS con "npm install -g @nestjs/cli",
e instalamos Nest File Generator en Visual Code.

Para crear un proyecto de nodejs usamos:

nest new project-name

Para iniciar el proyecto:

cd 00_proyecto
npm run start

Es necesario deshabilitar Prettier en caso de usarlo, o mostrara errores en los saltos de linea:

Archivo tsconfig.json:
    "strictNullChecks": false,

Archivo eslint.config.mjs:
    Eliminar linea 13 (Prettier)
    Eliminar linea 12 tambien

/* eslint-disable prettier/prettier */
Al principio del archivo (linea 1)

O cambiar el End Of Line Sequence a LF, en la barra inferior de visual code.



Importamos el decorador "Param" para extraer parámetros de la ruta (URL) en las peticiones HTTP. 
Por ejemplo, en la ruta `/saludo/personal/:name`, el valor de `:name` se obtiene usando `@Param('name')`.

Para nombrar la primera llamada a la API es necesario cambiar el nombre en "@Controller(NOMBRE)",
ahi usaremos el http://localhost:3000/NOMBRE/GETVARIABLE

///////

Instalar el http.service con:

npm install @nestjs/axios axios

await hace que no tengas que pedirle un valor instantaneo

// Instalar orm para la conexion a base de datos 

npm install @nestjs/typeorm@11 typeorm@0.3 mysql2

// typeorm

En typeorm usamos las entidades para hacer la call a las tablas, haciendo json de las filas

{
    nombre:"nombre"
    email:"email"
    numero:numero
}

Creamos un modelo default, y para rellenarlo, se coloca: 

La entity es, la asignacion al nombre de la tabla:
@Entity("nombre tabla")

Para ir asignando columnas son:


@PrimaryGeneratedColumn("primera columna")

Los auto incrementals son con @PrimaryGeneratedColumn

Las tablas que no son autoincrementales serian @PrimaryColumn

Cada columna que no sea la primarykey va con @Column()

A las columnas que pueden estar vacias se les añade @Column({nullable:true})

Para referenciar columnas con un nombre diferente se usa: 

@Column("nombre columna original")
name:string


Esto seria la entidad de conexion a la tabla, con las propiedades y valores.

// app.enableCors() en main.ts

Permite la llamada de fuentes desconocidas al backend

Modelo por cada tabla de la base de datos
Servicio por cada modelo de la base de datos para tratar con esa tabla

Metodos para el Repository:

save(entidad):Promise<Entidad>. Guarda o actualiza la entidad en la base de datos
find():Promise<Entidad[]>. Devuelve todas las entidades
findBy(where):Promise<Entidad[]>. Recupera todas lasentidades en función de una condición que se establece através de un JSON:
findOneBy(where):Promise<Entidad>. Igual que el anterior, pero devolviendo solo una entidad
remove(Entidad):Promise<Entidad>. Elimina la entidad
delete(where)Promise<DeleteResult>. Elimina las entidades que cumplen la condición


